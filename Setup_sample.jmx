<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Setup sample" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Setup: single threaded" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.arangodb.ArangoDB
import com.arangodb.ArangoDatabase
import com.arangodb.ArangoDBException
import com.arangodb.ArangoCollection
import com.arangodb.entity.CollectionType
import com.arangodb.entity.LoadBalancingStrategy
import com.arangodb.model.CollectionCreateOptions

try {
	ArangoDB arango = new ArangoDB.Builder().host(&quot;127.0.0.1&quot;, 8529)
	.loadBalancingStrategy(LoadBalancingStrategy.ONE_RANDOM)
	.acquireHostList(true)
	.build();

	ArangoDatabase db = arango.db(&quot;acxiom&quot;);
	boolean exists = db.exists();
	if (!exists) {
		exists = db.create();
	}

	if (!exists) {
		throw new Exception(&quot;database does not exist&quot;);
	}

	ArangoCollection col_document = db.collection(&quot;documents&quot;);
	if (!col_document.exists()) {
		CollectionCreateOptions cd_options = new CollectionCreateOptions();
		cd_options.name(&quot;documents&quot;).type(CollectionType.DOCUMENT);
		col_document.create(cd_options);
	}

	ArangoCollection col_entity = db.collection(&quot;entity_id&quot;);
	if (!col_entity.exists()) {
		CollectionCreateOptions ce_options = new CollectionCreateOptions();
		ce_options.name(&quot;entity_id&quot;).type(CollectionType.EDGES);
		col_entity.create(ce_options);
	}

	ArangoCollection col_id = db.collection(&quot;id_entity&quot;);
	if (!col_id.exists()) {
		CollectionCreateOptions ci_options = new CollectionCreateOptions();
		ci_options.name(&quot;id_entity&quot;).type(CollectionType.EDGES);
		col_id.create(ci_options);
	}

	ArangoCollection col_assoc = db.collection(&quot;associate&quot;);
	if (!col_assoc.exists()) {
		CollectionCreateOptions ca_options = new CollectionCreateOptions();
		ca_options.name(&quot;associate&quot;).type(CollectionType.EDGES);
		col_assoc.create(ca_options);
	}

	
	
	return &quot;setup successful&quot;
}
catch (ArangoDBException ae) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;ArangoDBException: &quot; + ae.getErrorMessage());
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View setup results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
